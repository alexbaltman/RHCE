---
- hosts: all
  become: yes
  become_method: sudo
  tasks:
    - name: Check for ansible v2
      assert:
        that:
          - ansible_version.major == 2
        enabled: yes
    - name: Restart server
      command: /sbin/shutdown -r 1
      async: 0
      poll: 0
    - name: Wait for server to reboot
      local_action: wait_for host={{ ansible_ssh_host }} state=started delay=15 timeout=300 port={{ ansible_ssh_port }}
      become: false
     # Could register this in less brittle fashion - what if there were 2 rules?
    - name: Get public/default zone config
      command: firewall-cmd --list-all
      register: pubzone
      when: ansible_hostname == "host1"
    - name: Check for public/default zone settings
      fail:
        msg: 'Got: {{ pubzone }}, expected: dns in services for the public/default zone'
      when: ansible_hostname == "host1"
      failed_when: "'dns' not in pubzone.stdout"
    - name: Create repo file
      file:
        state: touch
        path: /etc/yum.repos.d/myrepo.repo
    - name: Setup repo 
      blockinfile:
        dest: /etc/yum.repos.d/myrepo.repo
        block: |
          [myrepo]
          gpgcheck=0
          enabled=1
          baseurl=http://mirror.centos.org/centos/7/os/x86_64
    - name: Install dig and host cmds for testing
      yum:
        name: bind-utils
        state: present
    - name: "Test host2 dns access to host1 (eth1: 192.168.6.6)"
      command: dig @192.168.6.6 A google.com
      when: ansible_hostname == "host2"
    - name: "Test host1 dump cache"
      command: unbound-control dump_cache
      when: ansible_hostname == "host1"
    - name: "Test host1 flush cache"
      command: unbound-control flush google.com
      when: ansible_hostname == "host1"
    - name: "Test host1 dump cache again"
      command: unbound-control dump_cache
      when: ansible_hostname == "host1"
    - debug:
        msg: "You Passed!!!!"
